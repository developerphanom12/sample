name: Deploy to Amazon ECS

on:
  push:
    branches:
      - development
      - stage

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set env vars (common)
        run: |
          echo "AWS_REGION=eu-west-2" >> $GITHUB_ENV

          echo "REACT_APP_API_KEY=${{ secrets.REACT_APP_API_KEY }}" >> $GITHUB_ENV
          echo "REACT_APP_AUTH_DOMAIN=${{ secrets.REACT_APP_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "REACT_APP_PROJECT_ID=${{ secrets.REACT_APP_PROJECT_ID }}" >> $GITHUB_ENV
          echo "REACT_APP_STORAGE_BUCKET=${{ secrets.REACT_APP_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "REACT_APP_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "REACT_APP_APP_ID=${{ secrets.REACT_APP_APP_ID }}" >> $GITHUB_ENV

      - name: Set env vars (development)
        if: endsWith(github.ref, '/development')
        run: |
          echo "branch=development & env=development"
          echo "ENV=development" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=rh-web-dev-repo" >> $GITHUB_ENV
          echo "ECS_SERVICE=rh-web-dev-service" >> $GITHUB_ENV
          echo "ECS_CLUSTER=rh-web-dev-cluster" >> $GITHUB_ENV
          echo "CONTAINER_NAME=rh-web-dev-container" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION=deploy/task-definition-dev.json" >> $GITHUB_ENV

      - name: Set env vars (stage)
        if: endsWith(github.ref, '/stage')
        run: |
          echo "branch=stage & ENV=staging"
          echo "ENV=staging" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=rh-web-stage-repo" >> $GITHUB_ENV
          echo "ECS_SERVICE=rh-web-stage-service" >> $GITHUB_ENV
          echo "ECS_CLUSTER=rh-web-stage-cluster" >> $GITHUB_ENV
          echo "CONTAINER_NAME=rh-web-stage-container" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION=deploy/task-definition-stage.json" >> $GITHUB_ENV

      - name: Create env file
        run: |
          echo REACT_APP_ENV=$ENV >> .env

          echo REACT_APP_API_KEY=$REACT_APP_API_KEY >> .env.$ENV
          echo REACT_APP_AUTH_DOMAIN=$REACT_APP_AUTH_DOMAIN >> .env.$ENV
          echo REACT_APP_PROJECT_ID=$REACT_APP_PROJECT_ID >> .env.$ENV
          echo REACT_APP_STORAGE_BUCKET=$REACT_APP_STORAGE_BUCKET >> .env.$ENV
          echo REACT_APP_MESSAGING_SENDER_ID=$REACT_APP_MESSAGING_SENDER_ID >> .env.$ENV
          echo REACT_APP_APP_ID=$REACT_APP_APP_ID >> .env.$ENV

          cat .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f deploy/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg ENV=$ENV .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
